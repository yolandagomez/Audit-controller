import { useState } from 'react';

export default function AuditTaskManager() {
  const [view, setView] = useState('list'); // 'list', 'new', 'detail'
  const [audits, setAudits] = useState([]); // Sin auditorías de ejemplo
  
  const [selectedAudit, setSelectedAudit] = useState(null);
  const [filter, setFilter] = useState('active');
  const [newAudit, setNewAudit] = useState({
    company: "",
    type: "IFS",
    startDate: "",
    endDate: "",
    hasSufficientTime: true
  });

  const auditTypes = ["IFS", "IFS + BRC", "BRC", "Proveedores", "IFS GM", "Otro"];

  // Función para calcular fechas límite basadas en el tipo de auditoría
  const calculateDeadlines = (audit) => {
    const startDate = new Date(audit.startDate);
    const endDate = new Date(audit.endDate);
    
    // Plan de auditoría: 2 semanas antes de la fecha de inicio
    const planDeadline = new Date(startDate);
    planDeadline.setDate(planDeadline.getDate() - 14);
    
    // Plan de acción
    let actionPlanDeadline = new Date(endDate);
    if (audit.type === "IFS") {
      actionPlanDeadline.setDate(actionPlanDeadline.getDate() + 14); // 2 semanas
    } else if (audit.type === "BRC" || audit.type === "IFS + BRC") {
      actionPlanDeadline.setDate(actionPlanDeadline.getDate() + 5); // 5 días
    } else {
      actionPlanDeadline.setDate(actionPlanDeadline.getDate() + 7); // 1 semana
    }
    
    // Redactar informe
    let reportDeadline;
    if (audit.type.includes("IFS")) {
      // 4 semanas desde la fecha de envío del plan de acción (aproximado por ahora)
      reportDeadline = new Date(actionPlanDeadline);
      reportDeadline.setDate(reportDeadline.getDate() + 28);
      
      // Si hay restricciones por caducidad de certificado, se ajustará más adelante
    } else if (audit.type.includes("BRC")) {
      // 35 días desde el primer día de auditoría
      reportDeadline = new Date(startDate);
      reportDeadline.setDate(reportDeadline.getDate() + 35);
    } else {
      // 2 semanas para otros tipos
      reportDeadline = new Date(actionPlanDeadline);
      reportDeadline.setDate(reportDeadline.getDate() + 14);
    }
    
    return {
      planDeadline: planDeadline.toISOString().split('T')[0],
      actionPlanDeadline: actionPlanDeadline.toISOString().split('T')[0],
      reportDeadline: reportDeadline.toISOString().split('T')[0]
    };
  };

  const formatDate = (dateString) => {
    if (!dateString) return "-";
    const date = new Date(dateString);
    return date.toLocaleDateString('es-ES');
  };

  const getDeadlineStatus = (deadline) => {
    if (!deadline) return { color: "gray", text: "Sin plazo" };
    
    const today = new Date();
    const deadlineDate = new Date(deadline);
    const daysLeft = Math.ceil((deadlineDate - today) / (1000 * 60 * 60 * 24));
    
    if (daysLeft < 0) return { color: "bg-red-500", text: "Vencido" };
    if (daysLeft <= 3) return { color: "bg-orange-500", text: "Urgente" };
    if (daysLeft <= 7) return { color: "bg-yellow-500", text: "Próximo" };
    return { color: "bg-green-500", text: "En plazo" };
  };

  const handleCreateAudit = () => {
    if (!newAudit.company || !newAudit.startDate || !newAudit.endDate) {
      alert("Por favor completa todos los campos obligatorios");
      return;
    }
    
    const deadlines = calculateDeadlines(newAudit);
    
    const newAuditObject = {
      id: Date.now(), // Usar timestamp como ID único
      company: newAudit.company,
      type: newAudit.type,
      startDate: newAudit.startDate,
      endDate: newAudit.endDate,
      currentStage: 0,
      stages: [
        { 
          name: "Hacer plan de auditoría", 
          deadline: deadlines.planDeadline, 
          completed: false,
          completedDate: null 
        },
        { 
          name: "Enviar plan de auditoría", 
          deadline: deadlines.planDeadline, 
          completed: false,
          completedDate: null 
        },
        { 
          name: "Enviar plan de acción", 
          deadline: deadlines.actionPlanDeadline, 
          completed: false,
          completedDate: null 
        },
        { 
          name: "Redactar informe", 
          deadline: deadlines.reportDeadline, 
          completed: false,
          completedDate: null 
        },
        { 
          name: "Plan de acción recibido", 
          deadline: deadlines.reportDeadline, 
          completed: false,
          completedDate: null,
          isCorrect: null 
        },
        { 
          name: "Enviar expediente", 
          deadline: deadlines.reportDeadline, 
          completed: false,
          completedDate: null 
        },
        { 
          name: "Auditoría finalizada", 
          deadline: null, 
          completed: false,
          completedDate: null 
        }
      ]
    };
    
    setAudits([...audits, newAuditObject]);
    setNewAudit({
      company: "",
      type: "IFS",
      startDate: "",
      endDate: "",
      hasSufficientTime: true
    });
    setView('list');
  };

  const completeStage = (auditId) => {
    const updatedAudits = audits.map(audit => {
      if (audit.id === auditId) {
        const updatedStages = [...audit.stages];
        const currentStage = audit.currentStage;
        
        if (currentStage === 4) { // Stage "Plan de acción recibido"
          // Solo se puede completar si isCorrect está establecido
          if (updatedStages[currentStage].isCorrect === null) {
            alert("Primero debe indicar si el plan de acción es correcto");
            return audit;
          }
          
          if (updatedStages[currentStage].isCorrect === false) {
            alert("No se puede avanzar hasta que el plan de acción sea correcto");
            return audit;
          }
        }
        
        updatedStages[currentStage].completed = true;
        updatedStages[currentStage].completedDate = new Date().toISOString().split('T')[0];
        
        return {
          ...audit,
          currentStage: currentStage < updatedStages.length - 1 ? currentStage + 1 : currentStage,
          stages: updatedStages
        };
      }
      return audit;
    });
    
    setAudits(updatedAudits);
    
    // Actualizar también el audit seleccionado si es el que se modificó
    if (selectedAudit && selectedAudit.id === auditId) {
      const updatedAudit = updatedAudits.find(a => a.id === auditId);
      setSelectedAudit(updatedAudit);
    }
  };

  const setActionPlanCorrect = (auditId, isCorrect) => {
    const updatedAudits = audits.map(audit => {
      if (audit.id === auditId && audit.currentStage === 4) {
        const updatedStages = [...audit.stages];
        updatedStages[4].isCorrect = isCorrect;
        return {
          ...audit,
          stages: updatedStages
        };
      }
      return audit;
    });
    
    setAudits(updatedAudits);
    
    // Actualizar también el audit seleccionado si es el que se modificó
    if (selectedAudit && selectedAudit.id === auditId) {
      const updatedAudit = updatedAudits.find(a => a.id === auditId);
      setSelectedAudit(updatedAudit);
    }
  };

  const filteredAudits = audits.filter(audit => {
    if (filter === 'all') return true;
    if (filter === 'active') return !audit.stages[6].completed;
    if (filter === 'completed') return audit.stages[6].completed;
    return true;
  });

  return (
    <div className="p-6 max-w-4xl mx-auto bg-gray-50 min-h-screen">
      <h1 className="text-2xl font-bold mb-6 text-blue-800">Gestor de Auditorías</h1>
      
      {view === 'list' && (
        <div>
          <div className="flex justify-between mb-6">
            <div>
              <button 
                onClick={() => setFilter('all')}
                className={`px-3 py-1 mr-2 rounded ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
              >
                Todas
              </button>
              <button 
                onClick={() => setFilter('active')}
                className={`px-3 py-1 mr-2 rounded ${filter === 'active' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
              >
                Activas
              </button>
              <button 
                onClick={() => setFilter('completed')}
                className={`px-3 py-1 rounded ${filter === 'completed' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
              >
                Finalizadas
              </button>
            </div>
            <button 
              onClick={() => setView('new')}
              className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
            >
              Nueva Auditoría
            </button>
          </div>
          
          <div className="bg-white rounded-lg shadow">
            {filteredAudits.length === 0 ? (
              <div className="p-6 text-center text-gray-500">
                No hay auditorías que mostrar en este filtro
              </div>
            ) : (
              <ul>
                {filteredAudits.map(audit => (
                  <li 
                    key={audit.id} 
                    className="border-b p-4 hover:bg-gray-50 cursor-pointer"
                    onClick={() => {
                      setSelectedAudit(audit);
                      setView('detail');
                    }}
                  >
                    <div className="flex justify-between items-center">
                      <div>
                        <h3 className="font-medium">{audit.company}</h3>
                        <div className="text-sm text-gray-600">
                          <span className="mr-4">Tipo: {audit.type}</span>
                          <span>
                            Fechas: {formatDate(audit.startDate)} - {formatDate(audit.endDate)}
                          </span>
                        </div>
                      </div>
                      <div className="flex flex-col items-end">
                        <span className="text-sm mb-1">
                          Etapa actual: {audit.stages[audit.currentStage]?.name}
                        </span>
                        {audit.stages[audit.currentStage]?.deadline && (
                          <div className={`text-xs px-2 py-1 rounded-full text-white ${getDeadlineStatus(audit.stages[audit.currentStage].deadline).color}`}>
                            {getDeadlineStatus(audit.stages[audit.currentStage].deadline).text} - {formatDate(audit.stages[audit.currentStage].deadline)}
                          </div>
                        )}
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      )}
      
      {view === 'new' && (
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Nueva Auditoría</h2>
          
          <div className="mb-4">
            <label className="block text-gray-700 mb-2">Nombre de la Empresa *</label>
            <input 
              type="text" 
              className="w-full p-2 border rounded"
              value={newAudit.company}
              onChange={(e) => setNewAudit({...newAudit, company: e.target.value})}
              required
            />
          </div>
          
          <div className="mb-4">
            <label className="block text-gray-700 mb-2">Tipo de Auditoría *</label>
            <select 
              className="w-full p-2 border rounded"
              value={newAudit.type}
              onChange={(e) => setNewAudit({...newAudit, type: e.target.value})}
              required
            >
              {auditTypes.map(type => (
                <option key={type} value={type}>{type}</option>
              ))}
            </select>
          </div>
          
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-gray-700 mb-2">Fecha de Inicio *</label>
              <input 
                type="date" 
                className="w-full p-2 border rounded"
                value={newAudit.startDate}
                onChange={(e) => setNewAudit({...newAudit, startDate: e.target.value})}
                required
              />
            </div>
            <div>
              <label className="block text-gray-700 mb-2">Fecha de Fin *</label>
              <input 
                type="date" 
                className="w-full p-2 border rounded"
                value={newAudit.endDate}
                onChange={(e) => setNewAudit({...newAudit, endDate: e.target.value})}
                min={newAudit.startDate}
                required
              />
            </div>
          </div>
          
          {newAudit.type.includes("IFS") && (
            <div className="mb-6">
              <label className="flex items-center text-gray-700">
                <input 
                  type="checkbox" 
                  className="mr-2"
                  checked={newAudit.hasSufficientTime}
                  onChange={(e) => setNewAudit({...newAudit, hasSufficientTime: e.target.checked})}
                />
                ¿Hay tiempo suficiente para emitir el certificado dentro de la validez del certificado en vigor?
              </label>
            </div>
          )}
          
          <div className="flex justify-end">
            <button 
              className="px-4 py-2 bg-gray-300 text-gray-700 rounded mr-2 hover:bg-gray-400"
              onClick={() => setView('list')}
            >
              Cancelar
            </button>
            <button 
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              onClick={handleCreateAudit}
            >
              Crear Auditoría
            </button>
          </div>
        </div>
      )}
      
      {view === 'detail' && selectedAudit && (
        <div>
          <button 
            className="mb-4 px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 flex items-center"
            onClick={() => {
              setSelectedAudit(null);
              setView('list');
            }}
          >
            ← Volver a la lista
          </button>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex justify-between items-start mb-6">
              <div>
                <h2 className="text-xl font-semibold">{selectedAudit.company}</h2>
                <div className="text-gray-600">
                  <p>Tipo: {selectedAudit.type}</p>
                  <p>Fechas: {formatDate(selectedAudit.startDate)} - {formatDate(selectedAudit.endDate)}</p>
                </div>
              </div>
              <div className="text-right">
                <div className="text-sm mb-1">Progreso</div>
                <div className="w-32 bg-gray-200 rounded-full h-2.5">
                  <div 
                    className="bg-blue-600 h-2.5 rounded-full" 
                    style={{ width: `${(selectedAudit.currentStage / (selectedAudit.stages.length - 1)) * 100}%` }}
                  ></div>
                </div>
              </div>
            </div>
            
            <h3 className="font-medium mb-4">Etapa Actual</h3>
            
            <div className="border rounded-lg p-4 mb-6">
              <div className="flex justify-between items-center mb-2">
                <h4 className="font-semibold">{selectedAudit.stages[selectedAudit.currentStage].name}</h4>
                {selectedAudit.stages[selectedAudit.currentStage].deadline && (
                  <div className={`text-xs px-2 py-1 rounded-full text-white ${getDeadlineStatus(selectedAudit.stages[selectedAudit.currentStage].deadline).color}`}>
                    Plazo: {formatDate(selectedAudit.stages[selectedAudit.currentStage].deadline)}
                  </div>
                )}
              </div>
              
              {selectedAudit.currentStage === 4 && (
                <div className="mb-4 p-3 bg-gray-50 rounded">
                  <p className="mb-2">¿Se ha recibido el plan de acción?</p>
                  <div className="flex space-x-2">
                    <button
                      className={`px-3 py-1 rounded ${selectedAudit.stages[4].isCorrect === true ? 'bg-green-600 text-white' : 'bg-gray-200'}`}
                      onClick={() => setActionPlanCorrect(selectedAudit.id, true)}
                    >
                      Sí, es correcto
                    </button>
                    <button
                      className={`px-3 py-1 rounded ${selectedAudit.stages[4].isCorrect === false ? 'bg-yellow-500 text-white' : 'bg-gray-200'}`}
                      onClick={() => setActionPlanCorrect(selectedAudit.id, false)}
                    >
                      En proceso
                    </button>
                  </div>
                </div>
              )}
              
              <button
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                onClick={() => completeStage(selectedAudit.id)}
                disabled={selectedAudit.stages[selectedAudit.currentStage].completed}
              >
                Completar Etapa
              </button>
            </div>
            
            {selectedAudit.currentStage > 0 && (
              <div className="mb-6">
                <details>
                  <summary className="cursor-pointer text-blue-600 mb-2">
                    Ver etapas anteriores ({selectedAudit.currentStage})
                  </summary>
                  <div className="pl-4 border-l-2 border-gray-200">
                    {selectedAudit.stages.slice(0, selectedAudit.currentStage).map((stage, index) => (
                      <div key={index} className="mb-3">
                        <div className="flex justify-between items-center">
                          <div>
                            <h5 className="font-medium">{stage.name}</h5>
                            {stage.completedDate && (
                              <p className="text-sm text-gray-500">
                                Completado: {formatDate(stage.completedDate)}
                              </p>
                            )}
                          </div>
                          <div className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded">
                            Completado
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </details>
              </div>
            )}
            
            {selectedAudit.currentStage < selectedAudit.stages.length - 1 && (
              <div>
                <h3 className="font-medium mb-2">Siguiente Etapa</h3>
                <div className="border rounded-lg p-4 bg-gray-50">
                  <div className="flex justify-between items-center">
                    <h4>{selectedAudit.stages[selectedAudit.currentStage + 1].name}</h4>
                    {selectedAudit.stages[selectedAudit.currentStage + 1].deadline && (
                      <div className="text-sm text-gray-500">
                        Plazo: {formatDate(selectedAudit.stages[selectedAudit.currentStage + 1].deadline)}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}